import React from 'react';
import { CodeBlock } from "react-code-blocks";
import { historyEvent } from './timelineWidget';
import { scaleLog } from 'd3-scale';

/**
 * ClusterWidget<ClusterProps, ClusterState>: React.Component
 * display incorrect solutions that cannot be executed
 * clustered by error type
 */
export interface ErrorMessage {
    eType: string,
    eMessage: string,
    lineIndex: number,
    code: string,
    name: string,
    submissionIndex: number,
}

interface ClusterProps {
    errorType: string,
    errorMessages: ErrorMessage[]
    events: Map<string, historyEvent[]>
};
interface ClusterState {
    selectedErrorMessage: ErrorMessage,
};

export class ClusterWidget extends React.Component<ClusterProps, ClusterState>{
    constructor(props: ClusterProps){
        super(props);

        this.state = {
            selectedErrorMessage: this.props.errorMessages[0],
        }

        this.selectCode = this.selectCode.bind(this);
    }

    selectCode(event: React.MouseEvent){
        var index = parseInt(event.currentTarget.getAttribute('data-index')!);
        this.setState({selectedErrorMessage: this.props.errorMessages[index]});
    }

    render(): React.ReactNode {
        var domainStart: number | undefined = undefined;
        var domainEnd: number | undefined = undefined;
        var names: string[] = Array.from(this.props.events.keys());
        
        names.forEach((name: string) => {
            if (!this.props.events.has(name) || this.props.events.get(name)!.length===0){
                return;
            }
            // set domainStart
            domainStart = domainStart===undefined? this.props.events.get(name)![0].startTime : Math.min(domainStart, this.props.events.get(name)![0].startTime);
            // set domainEnd
            domainEnd = domainEnd===undefined? this.props.events.get(name)![this.props.events.get(name)!.length-1].startTime : Math.max(domainEnd, this.props.events.get(name)![this.props.events.get(name)!.length-1].startTime)
        })

        const timeScaler = scaleLog()
            .domain((domainStart!==undefined && domainEnd!==undefined)? [domainStart+1, domainEnd+1] : [1,10])
            .range([2, 200-2])

        const logScaler = scaleLog()
            .domain([1, 1000])
            .range([5, 20])

        return <div>
            {/* Error type */}
            <span>{this.props.errorType}</span>
            {/* Select bar of all errors */}
            <div>
                {this.props.errorMessages.map((value, index) => {
                    return <div className='select-box' data-index={index} onMouseOver={this.selectCode}></div>
                })}
            </div>
            {/* Mirror timeline of selected person */}
            <div>
                <svg
                    width={300}
                    height={40}
                >
                    <g >
                        <path className='x-axis' d={`M0 20 L200 20`} stroke={"black"}></path>
                    </g>
                    <g>
                        {this.props.events.get(this.state.selectedErrorMessage.name)?.map((event: historyEvent, index: number) => {
                            return <g key={index}>
                            <rect 
                                className='event-item'
                                height={logScaler(event.radius)} 
                                width={1}
                                x={timeScaler(event.startTime+1)} 
                                y={20-logScaler(event.radius)}
                                data-index={index}
                                data-title={name}
                                data-tooltip={event.tooltip}
                                fill={event.correct? 'green': 'red'}
                                fillOpacity={index===this.state.selectedErrorMessage.submissionIndex? '100%' : '20%'}
                            />
                        </g>
                        })}
                    </g>
                </svg>
            </div>
            {/* Error message of selected example */}
            <div><span>{this.state.selectedErrorMessage.eMessage}</span></div>
            {/* Error code */}
            <div className='code-editor-preview'>
                <CodeBlock
                    text={this.state.selectedErrorMessage.code}
                    language={"python"}
                    highlight={String(this.state.selectedErrorMessage.lineIndex)}
                />
            </div>
        </div>
    }
}


/**
 * OverCodeClusterWidget<OverCodeClusterProps, OverCodeClusterState>: React.Component
 * display clusters generated by OverCode
 * clustered by computation
 * 
 * would like to have animation - lower priority
 */

export interface OverCodeCluster {
    id: number; // id of the cluster
    correct: boolean; // is the cluster correct?
    count: number; // how many solutions are in this cluster?
    members: string[]; // solutions in this cluster
}
interface OverCodeClusterProps {
    // clusterIDs: number[];
    cluster_id: number;
    cluster: OverCodeCluster;
};
interface OverCodeClusterState {
    selectedCode: string;
};



export class OverCodeClusterWidget extends React.Component<OverCodeClusterProps, OverCodeClusterState>{
    constructor(props: OverCodeClusterProps){
        super(props);
        this.state = {
            selectedCode: this.props.cluster.members[0],
        }
        this.selectCode = this.selectCode.bind(this);
    }

    selectCode(event: React.MouseEvent){
        var index = parseInt(event.currentTarget.getAttribute('data-index')!);
        this.setState({selectedCode: this.props.cluster.members[index]});
    }

    render(): React.ReactNode {

        return <div >
            {/* cluster id */}
            <span>Cluster {this.props.cluster_id}, {this.props.cluster.count} solutions</span>

            {/* select slider */}
            <div>
                {this.props.cluster.members.map((value, index) => {
                    return <div className='select-box' data-index={index} onMouseOver={this.selectCode}></div>
                })}
            </div>

            <div className='code-editor-preview'>
                <CodeBlock
                    text={this.state.selectedCode}
                    language={"python"}
                    // highlight={String(this.state.selectedErrorMessage.lineIndex)}
                />
            </div>

        </div>
    }
}